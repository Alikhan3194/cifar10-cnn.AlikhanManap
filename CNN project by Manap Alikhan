# üñº CIFAR-10 –∫–µ—Å–∫—ñ–Ω–¥–µ—Ä—ñ–Ω –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è–ª–∞—É (CNN –∞—Ä“õ—ã–ª—ã) 

##  –ñ–æ–±–∞ —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã
–ë“±–ª –∂–æ–±–∞–¥–∞ **–°–≤–µ—Ä—Ç–æ—á–Ω–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å (CNN)** –ø–∞–π–¥–∞–ª–∞–Ω—ã–ª–∞–¥—ã, –æ–ª **CIFAR-10** –¥–∞—Ç–∞—Å–µ—Ç—ñ–Ω—ñ“£ –∫–µ—Å–∫—ñ–Ω–¥–µ—Ä—ñ–Ω 10 —Ç“Ø—Ä–ª—ñ –∫–∞—Ç–µ–≥–æ—Ä–∏—è“ì–∞ –∂—ñ–∫—Ç–µ—É–≥–µ “Ø–π—Ä–µ–Ω–µ–¥—ñ. –ñ–æ–±–∞ **TensorFlow + Keras** –∫”©–º–µ–≥—ñ–º–µ–Ω –∂–∞—Å–∞–ª–¥—ã.

##  –ù”ô—Ç–∏–∂–µ–ª–µ—Ä  
 **–ñ–∞—Ç—Ç—ã“ì—É (Training) –¥”ô–ª–¥—ñ–≥—ñ:** 85%  
 **–¢–µ—Å—Ç –¥”ô–ª–¥—ñ–≥—ñ:** 78-82%  

##  –ñ–æ–±–∞–Ω—ã“£ –Ω–µ–≥—ñ–∑–≥—ñ –µ—Ä–µ–∫—à–µ–ª—ñ–∫—Ç–µ—Ä—ñ  
 **3 –ö–æ–Ω–≤–æ–ª—é—Ü–∏—è–ª—ã“õ “õ–∞–±–∞—Ç (Conv2D)** ‚Äì —Å—É—Ä–µ—Ç—Ç–µ—Ä–¥–µ–Ω –µ—Ä–µ–∫—à–µ–ª—ñ–∫—Ç–µ—Ä–¥—ñ “Ø–π—Ä–µ–Ω–µ–¥—ñ  
 **3 MaxPooling “õ–∞–±–∞—Ç—ã** ‚Äì –º–æ–¥–µ–ª—å–¥—ñ –æ“£—Ç–∞–π–ª–∞–Ω–¥—ã—Ä–∞–¥—ã  
 **–ü–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–π “õ–∞–±–∞—Ç (Dense Layer)** ‚Äì —Å—ã–Ω—ã–ø—Ç–∞—Ä–¥—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è–ª–∞—É  
 **Softmax “õ–∞–±–∞—Ç—ã (10 —Å—ã–Ω—ã–ø “Ø—à—ñ–Ω)**  
 **–ú–æ–¥–µ–ª—å–¥—ñ“£ 20 —ç–ø–æ—Ö–∞ –±–æ–π—ã –æ“õ—ã—Ç—ã–ª—É—ã**  

##  –î–µ—Ä–µ–∫—Ç–µ—Ä –∂–∏—ã–Ω—ã (Dataset)  
**CIFAR-10** ‚Äì 60 000 –∫–µ—Å–∫—ñ–Ω–Ω–µ–Ω —Ç“±—Ä–∞—Ç—ã–Ω –¥–∞—Ç–∞—Å–µ—Ç. ”ò—Ä —Å—É—Ä–µ—Ç 32√ó32 –ø–∏–∫—Å–µ–ª—å–¥–µ–Ω —Ç“±—Ä–∞–¥—ã.  
–ú–æ–¥–µ–ª—å –∫–µ–ª–µ—Å—ñ 10 –∫–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞–Ω–∏–¥—ã:  
-  **“∞—à–∞“õ (airplane)**  
-  **–ê–≤—Ç–æ–º–æ–±–∏–ª—å (automobile)**  
-  **“ö“±—Å (bird)**  
-  **–ú—ã—Å—ã“õ (cat)**  
-  **–ë“±“ì—ã (deer)**  
-  **–ò—Ç (dog)**  
-  **–ë–∞“õ–∞ (frog)**  
-  **–ñ—ã–ª“õ—ã (horse)**  
-  **–ö–µ–º–µ (ship)**  
-  **–ñ“Ø–∫ –∫”©–ª—ñ–≥—ñ (truck)**  
import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 5))
for i in range(10):
    plt.subplot(2, 5, i+1)
    plt.imshow(x_train[i])
    plt.title(class_names[y_train[i][0]])
    plt.axis("off")
plt.show()


# –ó–∞–≥—Ä—É–∂–∞–µ–º CIFAR-10 dataset
(x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()

# –ù–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
class_names = ["airplane", "automobile", "bird", "cat", "deer", 
               "dog", "frog", "horse", "ship", "truck"]

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É 0-1)
x_train, x_test = x_train / 255.0, x_test / 255.0

model = keras.Sequential([
    # –ü–µ—Ä–≤—ã–π —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–π —Å–ª–æ–π
    keras.layers.Conv2D(32, (3, 3), activation="relu", input_shape=(32, 32, 3)),
    keras.layers.MaxPooling2D((2, 2)),

    # –í—Ç–æ—Ä–æ–π —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–π —Å–ª–æ–π
    keras.layers.Conv2D(64, (3, 3), activation="relu"),
    keras.layers.MaxPooling2D((2, 2)),

    # –¢—Ä–µ—Ç–∏–π —Å–≤–µ—Ä—Ç–æ—á–Ω—ã–π —Å–ª–æ–π
    keras.layers.Conv2D(128, (3, 3), activation="relu"),
    keras.layers.MaxPooling2D((2, 2)),

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø–ª–æ—Å–∫–∏–π –≤–µ–∫—Ç–æ—Ä
    keras.layers.Flatten(),

    # –ü–æ–ª–Ω–æ—Å–≤—è–∑–Ω—ã–µ —Å–ª–æ–∏
    keras.layers.Dense(128, activation="relu"),
    keras.layers.Dense(10, activation="softmax")  # 10 –∫–ª–∞—Å—Å–æ–≤
])

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è –º–æ–¥–µ–ª–∏
model.compile(optimizer="adam",
              loss="sparse_categorical_crossentropy",
              metrics=["accuracy"])

# –í—ã–≤–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–∏
model.summary()

history = model.fit(x_train, y_train, epochs=20, validation_data=(x_test, y_test))

test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print(f"\n–ú–æ–¥–µ–ª—å –¥–æ—Å—Ç–∏–≥–ª–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç–µ: {test_acc:.2%}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
model.save("cifar10_cnn_model.h5")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
loaded_model = keras.models.load_model("cifar10_cnn_model.h5")
